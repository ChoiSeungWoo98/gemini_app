# 워크플로우 이름
name: Create Release and Update Packages

# 'v'로 시작하는 태그가 푸시될 때 실행
on:
  push:
    tags:
      - 'v*'

jobs:
  # --- 1단계: 빌드 Job ---
  # macOS와 Windows에서 각각 병렬로 빌드를 수행합니다.
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      # Windows의 'EPERM' 오류 해결을 위해 npm 캐시를 먼저 정리합니다.
      - name: Install dependencies
        run: npm cache clean --force && npm install

      - name: Build the app
        # 현재 실행되는 OS에 맞는 빌드만 수행합니다. (mac 또는 win)
        run: npm run build -- --${{ matrix.os == 'macos-latest' && 'mac' || 'win' }}

      # 빌드된 결과물을 OS별로 구분된 임시 저장소에 업로드합니다.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist

  # --- 2단계: 릴리즈 Job ---
  # 'build' 작업이 모두 성공해야만 이 작업이 실행됩니다.
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 모든 임시 저장소에서 빌드 결과물들을 다운로드합니다.
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # 모든 dist-* 패턴의 아티팩트를 다운로드합니다.
          pattern: dist-*
          # 파일 경로 충돌을 방지합니다.
          merge-multiple: true
          path: dist

      # 하나의 GitHub Release를 만들고, 모든 설치 파일을 업로드합니다.
      - name: Create Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          # dist 폴더 아래의 모든 .dmg와 .exe 파일을 업로드 대상으로 지정합니다.
          files: dist/*

      # --- [개선된 부분] ---
      # 릴리즈된 여러 파일 중에서 .dmg 파일의 다운로드 URL만 정확히 추출합니다.
      - name: Get DMG Download URL
        id: get_dmg_url
        run: |
          URL=$(echo '${{ steps.create_release.outputs.assets }}' | jq -r '.[] | select(.name | endswith(".dmg")) | .browser_download_url')
          echo "dmg_url=${URL}" >> $GITHUB_OUTPUT

      # Homebrew Tap 업데이트 신호를 보냅니다.
      - name: Dispatch Homebrew Tap Update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.TAP_REPO_TOKEN }}
          event-type: new-release-created
          client-payload: >-
            {
              "version": "${{ github.ref_name }}",
              "download_url": "${{ steps.get_dmg_url.outputs.dmg_url }}"
            }
