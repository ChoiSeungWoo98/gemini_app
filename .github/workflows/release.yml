# 워크플로우의 이름입니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Create Release and Upload DMG

# 'v'로 시작하는 태그(예: v1.0.0, v1.2.3)가 푸시되었을 때만 실행됩니다.
on:
  push:
    tags:
      - 'v*'

# 실제 수행할 작업들을 정의합니다.
jobs:
  build-and-release:
    # 이 작업은 macOS 가상 환경에서 실행됩니다. .dmg 파일을 빌드해야 하므로 필수입니다.
    runs-on: macos-latest
    # 이 작업에 필요한 권한을 명시적으로 부여합니다.
    # contents: write 권한이 있어야 GitHub Release를 생성할 수 있습니다.
    permissions:
      contents: write

    # 작업의 단계들을 순서대로 정의합니다.
    steps:
      # 1. 소스 코드 가져오기
      # 현재 저장소의 코드를 가상 머신으로 체크아웃합니다.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      # 앱 빌드에 필요한 Node.js를 설치합니다.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24' # 프로젝트에 맞는 Node.js 버전을 사용하세요.

      # 3. 의존성 설치 (수정된 부분)
      # package.json을 기반으로 의존성을 설치합니다.
      - name: Install dependencies
        run: npm install

      # 4. 앱 빌드 실행
      # package.json에 정의된 build 스크립트를 실행하여 .dmg 파일을 생성합니다.
      - name: Build the app
        run: npm run build

      # 5. 릴리즈 생성 및 .dmg 파일 업로드
      # 태그 정보를 바탕으로 GitHub Release를 만들고, 빌드된 .dmg 파일을 첨부합니다.
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # dist/ 폴더 아래에 있는 모든 .dmg 파일을 찾아 첨부합니다.
          files: dist/*.dmg

      # 빌드/릴리즈가 끝난 후, 다른 워크플로우를 깨우는 '신호'를 보냅니다.
      - name: Dispatch Tap Update Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          # 신호를 보낼 때 사용자님의 권한(PAT)이 반드시 필요합니다.
          token: ${{ secrets.TAP_REPO_TOKEN }}
          # 이 신호의 이름입니다.
          event-type: new-release-created
